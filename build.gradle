plugins {
    id "net.ltgt.apt-eclipse" version "0.21"
    id "com.github.johnrengelman.shadow" version "5.2.0"
    id "application"
    id "idea"
}

sourceCompatibility = 1.11
targetCompatibility = 1.11

ext {
    assertj_version = "3.21.0"
    micronautVersion = "3.2.1"
    archunitVersion = "0.22.0"
    logbackVersion = "1.2.7"
}


repositories {
    mavenCentral()
}

sourceSets {
    testInteg {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
    testArch {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
    testApi
    testContract
}

// see https://youtrack.jetbrains.com/issue/IDEA-151925#focus=streamItem-27-2355076-0-0
apply plugin: 'idea'
idea {
    module {
        testSourceDirs += project.sourceSets.testInteg.java.srcDirs
        testSourceDirs += project.sourceSets.testContract.java.srcDirs
        testSourceDirs += project.sourceSets.testArch.java.srcDirs
        testSourceDirs += project.sourceSets.testApi.java.srcDirs
    }
}

configurations {
    testIntegImplementation.extendsFrom testImplementation
    testIntegRuntime.extendsFrom testRuntimeOnly

    testContractImplementation.extendsFrom testImplementation
    testContractRuntime.extendsFrom testRuntimeOnly

    testArchImplementation.extendsFrom testImplementation
    testArchRuntime.extendsFrom testRuntimeOnly

    testApiImplementation.extendsFrom testImplementation
    testApiRuntime.extendsFrom testRuntimeOnly
}

dependencies {
    annotationProcessor enforcedPlatform("io.micronaut:micronaut-bom:$micronautVersion")
    annotationProcessor "io.micronaut:micronaut-inject-java"
    annotationProcessor "io.micronaut:micronaut-validation"
    implementation enforcedPlatform("io.micronaut:micronaut-bom:$micronautVersion")
    implementation "io.micronaut:micronaut-inject"
    implementation "io.micronaut:micronaut-validation"
    implementation "io.micronaut:micronaut-runtime"
    implementation "io.micronaut:micronaut-http-server-netty"
    implementation "io.micronaut:micronaut-http-client"
    implementation "io.micronaut:micronaut-management"
    runtimeOnly "ch.qos.logback:logback-classic:${logbackVersion}"
    testAnnotationProcessor enforcedPlatform("io.micronaut:micronaut-bom:$micronautVersion")
    testAnnotationProcessor "io.micronaut:micronaut-inject-java"
    testImplementation enforcedPlatform("io.micronaut:micronaut-bom:$micronautVersion")
    testImplementation "org.junit.jupiter:junit-jupiter-api"
    testImplementation "io.micronaut.test:micronaut-test-junit5"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"

    testImplementation "org.assertj:assertj-core:${assertj_version}"
    testArchImplementation "com.tngtech.archunit:archunit-junit5:${archunitVersion}" // only for arch tests
}

mainClassName = "tech.adriano.hexagonal.service.application.Application"

task testInteg(type: Test) {
    testClassesDirs = sourceSets.testInteg.output.classesDirs
    classpath += sourceSets.testInteg.runtimeClasspath
}

task testArch(type: Test) {
    testClassesDirs = sourceSets.testArch.output.classesDirs
    classpath += sourceSets.testArch.runtimeClasspath
}

task testContract(type: Test) {
    testClassesDirs = sourceSets.testContract.output.classesDirs
    classpath += sourceSets.testContract.runtimeClasspath
}

task testApi(type: Test) {
    testClassesDirs = sourceSets.testApi.output.classesDirs
    classpath += sourceSets.testApi.runtimeClasspath
}

shadowJar {
    mergeServiceFiles()
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    options.compilerArgs.add('-parameters')
}

tasks.withType(JavaExec) {
    jvmArgs('-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')
}

tasks.withType(Test) {
    useJUnitPlatform()
    testLogging {
        exceptionFormat = 'FULL'
        showStandardStreams = true
        events 'FAILED', 'SKIPPED'
    }
    afterSuite { desc, result ->
        if (!desc.parent) {
            println "Test summary: ${result.testCount} tests, " +
                    "${result.successfulTestCount} succeeded, " +
                    "${result.failedTestCount} failed, " +
                    "${result.skippedTestCount} skipped"
        }
    }
}
